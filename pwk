#!/usr/bin/env python3
"""
Provides one-liner support for Python via curly braces.

It transforms (one-lined) Python code containing curly braces to standard Python and exec()-utes it;
has variables and lists to integrate with bash; and can process stdin, a bit awk-ish.

Examples:
>pwk 'print("Brace yourself, World!")'
Brace yourself, World!
---
>pwk 'if "braces"=="bad": { print("Be gone!"); exit(99) } else: { print("Howdy!") }'
Howdy!
>pwk 'if "braces"=="bad": { print("Be gone!"); exit(99) } else: { print("Howdy!") }'  -d
if "braces" == "bad" :
    print ( "Be gone!" )
    exit ( 99 )
else :
    print ( "Howdy!" )
---
>pwk 'def s2i(s): { return int(s) } print(s2i("41")+1)'
42
>pwk 'import numpy as np; print(np.sin(3.14))'
0.0015926529164868282
# Note: modules sys, io, os, and tokenize are already available.
---
>ls / | pwk 'for s in sys.stdin: print(s.strip())'
>ls / | pwk 'for s in sys.stdin: { try: { print(os.listdir("/"+s.strip())) } except: pass }'
---
>pwk 'print("%s, %s!" % (s1, s2))'  -v s1 Hello  -v s2 World
Hello, World!
>pwk 'print(ls1[0]+ls2[-1])'  -V ls1 En a b c  -V ls2 x y joy!
Enjoy!

"""
import sys
import io
import os
import tokenize


def pwk2p(s):
    ret = ""

    lt = tokenize.tokenize(io.BytesIO(s.encode("utf-8")).readline)

    indent = 0
    open_brackets = 0

    newline = False
    indent_up = False
    indent_down = False
    skip = False

    while True:
        try:
            t = next(lt)

            if t.type == tokenize.ENCODING:
                last_t = t
                continue

            if t.type == tokenize.OP and t.string == ";":
                newline = True
            elif t.type == tokenize.OP and t.string == ":":
                if open_brackets == 0:
                    newline = True
                    indent_up = True

            elif t.type == tokenize.OP and t.string == "{":
                if last_t.type == tokenize.OP and last_t.string == ":":
                    skip = True
                else:
                    open_brackets += 1
            elif t.type == tokenize.OP and t.string == "}":
                if open_brackets > 0:
                    open_brackets -= 1
                elif open_brackets == 0:
                    if indent > 0:
                        newline = True
                        indent_down = True
                        skip = True
                    else:
                        raise Epwk("ERROR: too many closing brackets")

            if indent_up:
                indent += 4
            elif indent_down:
                indent -= 4

            if newline and indent_up:
                ret += ":\n" + " " * indent
            elif newline:
                ret += "\n" + " " * indent
            else:
                if not skip:
                    ret += t.string + " "

            newline = False
            indent_up = False
            indent_down = False
            skip = False
            last_t = t

        except StopIteration:
            break
        except tokenize.TokenError:
            continue

    ret += "\n"

    return ret


def argparse():
    # import argparse in a different scope so the it's not automatically
    # added to the pwk's namespace
    from argparse import ArgumentParser, RawTextHelpFormatter

    parser = ArgumentParser(epilog=__doc__, formatter_class=RawTextHelpFormatter)

    parser.add_argument(
        "pwk_code",
        help="Code you want to execute",
    )

    parser.add_argument(
        "-d",
        "--debug",
        action="store_true",
        help="Outputs the transformed code for debugging",
    )

    parser.add_argument(
        "-v",
        "--variables",
        action="append",
        nargs=2,
        metavar=("name", "value"),
        help=(
            "Pass variables over to your program\n"
            """$ ./pwk 'print(f"{s1}, {s2}")'  -v s1 $USER  -v s2 $SHELL\n"""
            "martin, /bin/bash"
        ),
    )

    parser.add_argument(
        "-V",
        "--list_variables",
        action="append",
        nargs="*",
        metavar=("name", "value"),
        help=(
            "... or pass a list of variables!\n"
            """$ pwk 'print(my_list)'  -V my_list /bin/who*\n"""
            "['/bin/who', '/bin/whoami']"
        ),
    )

    return parser.parse_args()


def main(pwk_code, variables, list_variables, debug):
    cmd_string = pwk2p(pwk_code)

    separator = "\n"

    if variables:
        # argparse ensures that we have a key value pairing
        _vars = f"{separator}".join([f"{v[0]} = '{v[1]}'" for v in variables])
        cmd_string = f"{_vars}{separator}{cmd_string}{separator}"

    if list_variables:
        _vars = {lst[0]: [var for var in lst[1:]] for lst in list_variables}
        _vars = f"{separator}".join((f"{k} = {v}" for k, v in _vars.items()))
        cmd_string = f"{_vars}{separator}{cmd_string}"

    if debug:
        print(cmd_string)
        sys.exit(0)

    try:
        exec(compile(cmd_string, "<pwk>", "exec"))
    except Exception as e:
        # The compile step helps us be more specific when it comes to errors
        import traceback

        # Prints the SyntaxErrors in a friendlier format
        traceback.print_exception(None, e, None)
        sys.exit(1)


try:
    # avoid broken pipe
    from signal import signal, SIGPIPE, SIG_DFL

    signal(SIGPIPE, SIG_DFL)
except ImportError:
    pass


class Epwk(ValueError):
    pass


if __name__ == "__main__":
    args = argparse()
    main(args.pwk_code, args.variables, args.list_variables, args.debug)
